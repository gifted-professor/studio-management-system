generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id            Int            @id @default(autoincrement())
  name          String
  phone         String?        @unique
  address       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  status        String         @default("ACTIVE")
  activityLevel String         @default("ACTIVE")
  totalOrders   Int            @default(0)
  totalAmount   Float          @default(0)
  lastOrderDate DateTime?
  returnRate    Float?         @default(0)
  aiSuggestions AISuggestion[]
  followUps     FollowUp[]
  orders        Order[]

  @@index([totalOrders, createdAt])
  @@index([totalAmount, createdAt])
  @@index([lastOrderDate, createdAt])
  @@index([activityLevel])
  @@index([name])
  @@map("members")
}

model Order {
  id                Int        @id @default(autoincrement())
  memberId          Int
  orderNo           String?    @unique
  paymentDate       DateTime?
  platform          String?
  responsiblePerson String?
  productName       String?
  productCode       String?
  manufacturer      String?
  amount            Float?
  costPrice         Float?
  profit            Float?
  profitRate        Float?
  status            String     @default("PENDING")
  size              String?
  color             String?
  customerInfo      String?
  shippingAddress   String?
  courierCompany    String?
  remarks           String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  refundAmount      Float?
  refundDate        DateTime?
  refundReason      String?
  refundResponsible String?
  refundType        String?
  returnAddress     String?
  returnTrackingNo  String?
  followUps         FollowUp[]
  member            Member     @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model FollowUp {
  id               Int       @id @default(autoincrement())
  memberId         Int
  orderId          Int?
  followUpDate     DateTime  @default(now())
  followUpType     String
  content          String?
  method           String
  result           String?
  nextFollowUpDate DateTime?
  operator         String?
  createdAt        DateTime  @default(now())
  order            Order?    @relation(fields: [orderId], references: [id])
  member           Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("follow_ups")
}

model AISuggestion {
  id              String   @id @default(cuid())
  memberId        Int
  title           String
  content         String
  type            String
  priority        String
  reasoning       String
  customerSegment String?
  purchasePattern String?
  riskLevel       String?
  potentialValue  String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  member          Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId, isActive])
  @@map("ai_suggestions")
}
